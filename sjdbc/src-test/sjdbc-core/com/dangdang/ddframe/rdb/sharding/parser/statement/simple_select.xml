<?xml version="1.0" encoding="UTF-8"?>
<asserts>
    <assert id="assertSelectWithoutShardingKey" sql="select * from order FORCE INDEX (order_id)"
            expected-sql="SELECT * FROM [Token(order)] FORCE INDEX (order_id)">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context/>
        </condition-contexts>
    </assert>

    <assert id="assertSelectWithTableNameAsAlias" sql="select * from order where order.order_id = 1"
            expected-sql="SELECT * FROM [Token(order)] WHERE [Token(order)].order_id = 1">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="1" type="java.lang.Integer"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>

    <assert id="assertSelectWithAlias" sql="select * from order o where o.order_id = 1"
            expected-sql="SELECT * FROM [Token(order)] o WHERE o.order_id = 1">
        <tables>
            <table name="order" alias="o"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="1" type="java.lang.Integer"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>

    <assert id="assertSelectWithCondition" sql="select * from order where order_id = 1 and state = 'RUNNING'"
            expected-sql="SELECT * FROM [Token(order)] WHERE order_id = 1 AND state = 'RUNNING'">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="1" type="int"/>
                </condition>
                <condition column-name="state" table-name="order" operator="EQUAL">
                    <value value="RUNNING" type="java.lang.String"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>

    <assert id="assertSelectForShardingKeySelectCondition"
            sql="select * from order where order_id = 1 and other_state = 'RUNNING'"
            expected-sql="SELECT * FROM [Token(order)] WHERE order_id = 1 AND other_state = 'RUNNING'">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="1" type="int"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>

    <assert id="assertSelectForBetween"
            sql="select * from order where order_id between 1 and 10 and other_state = 'RUNNING'"
            expected-sql="SELECT * FROM [Token(order)] WHERE order_id BETWEEN 1 AND 10 AND other_state = 'RUNNING'">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="BETWEEN">
                    <value value="1" type="int"/>
                    <value value="10" type="int"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>

    <assert id="assertSelectForIn" sql="select * from order where order_id in (1,2,3) and other_state = 'RUNNING'"
            expected-sql="SELECT * FROM [Token(order)] WHERE order_id IN (1, 2, 3) AND other_state = 'RUNNING'">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="IN">
                    <value value="1" type="int"/>
                    <value value="2" type="int"/>
                    <value value="3" type="int"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>

    <assert id="assertSelectWithDateFunction"
            sql="select * from order where date = str_to_date('2013-01-01 01:21:01','%Y-%m-%d %H:%i:%s')"
            expected-sql="SELECT * FROM [Token(order)] WHERE date = str_to_date('2013-01-01 01:21:01', '%Y-%m-%d %H:%i:%s')">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context/>
        </condition-contexts>
    </assert>

    <!-- // TODO 这里可优化，将两个字段AND = 替换为永false -->
    <assert id="assertSelectWithSameShardingColumnForAnd" sql="select * from order where order_id = 1 and order_id = 2"
            expected-sql="SELECT * FROM [Token(order)] WHERE order_id = 1 AND order_id = 2">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="1" type="int"/>
                    <value value="2" type="int"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>

    <!-- // TODO 目前对于IN多结果不同做到交集处理 仅仅是简单的加入 -->
    <assert id="assertSelectWithSameShardingColumnForIn"
            sql="select * from order where order_id in(1,3) and order_id in (2,4)"
            expected-sql="SELECT * FROM [Token(order)] WHERE order_id IN (1, 3) AND order_id IN (2, 4)">
        <tables>
            <table name="order"/>
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="IN">
                    <value value="1" type="int"/>
                    <value value="3" type="int"/>
                    <value value="2" type="int"/>
                    <value value="4" type="int"/>
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>
</asserts>
